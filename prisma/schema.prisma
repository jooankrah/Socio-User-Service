generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  username    String?
  role        Role      @default(user)
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  followerId  String?
  followingId String?
  comments    Comment[]
  posts       Post[]    @relation("author")
  profile     Profile?
  follower    User?     @relation("follower", fields: [followerId], references: [id])
  followers   User[]    @relation("follower")
  following   User?     @relation("following", fields: [followingId], references: [id])
  followings  User[]    @relation("following")
  likedPosts  Post[]    @relation("likes")
}

model Profile {
  id         String   @id @default(uuid())
  firstName  String?
  otherNames String?
  phone      String?
  address    String?
  country    String?
  image      String?
  userId     String   @unique
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Topic {
  id    String @id @unique @default(uuid())
  name  String
  slug  String
  Posts Post[]
  @@map("Topics")
}

model Post {
  id        String    @id @default(uuid())
  title     String?
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  type      String?
  authorId  String
  comments  Comment[]
  author    User      @relation("author", fields: [authorId], references: [id], onDelete: Cascade)
  likes     User[]    @relation("likes")
  Topic     Topic?    @relation(fields: [topicId], references: [id])
  topicId   String?
}

model Comment {
  id               String    @id @default(uuid())
  postId           String
  authorId         String    @unique
  content          String
  repliedCommentId String?
  author           User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post             Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  repliedComment   Comment?  @relation("replies", fields: [repliedCommentId], references: [id])
  replies          Comment[] @relation("replies")
}

enum Role {
  admin
  user
}
